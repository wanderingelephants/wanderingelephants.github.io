{"version":3,"sources":["webpack:///./node_modules/bignumber.js/bignumber.js"],"names":["globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","b","alphabet","c","caseChanged","e","i","isNum","len","str","x","this","_isBigNumber","s","slice","String","test","charCodeAt","indexOf","replace","search","substring","length","intCheck","round","DEBUG","Error","charAt","toUpperCase","toLowerCase","push","format","n","rm","id","c0","ne","coeffToString","toExponential","toFixedPoint","maxOrMin","args","method","m","call","normalise","j","pop","sd","r","d","k","ni","rd","xc","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","max","arguments","lt","minimum","min","gt","random","pow2_53","random53bitInt","dp","a","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","y","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","z","l","name","zs"],"mappings":"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","file":"js/chunk-2d0e44a1.3816599f.js","sourcesContent":[";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n"],"sourceRoot":""}